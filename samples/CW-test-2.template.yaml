AWSTemplateFormatVersion: 2010-09-09
Description: >-
  WSO2 API Manager deployment with WSO2 API Manager Analytics for AWS
  Marketplace
# Metadata:
#   'AWS::CloudFormation::Interface':
#     ParameterGroups:
#       - Label:
#           default: Cluster Configuration
#         Parameters:
#           - KeyPairName
#           - AWSAccessKeySecret
#       - Label:
#           default: Network Configuration
#         Parameters:
#           - CertificateName
#       - Label:
#           default: Database Configuration
#         Parameters:
#           - DBUsername
#           - DBPassword
#     ParameterLabels:
#       AWSAccessKeySecret:
#         default: AWS Access Secret Key
#       CertificateName:
#         default: Which certificate should be used at the Load Balancer for APIM?
#       DBUsername:
#         default: APIM Database Master username?
#       DBPassword:
#         default: APIM Database Master password
Resources:
  WSO2AMVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2AMVPC
      CidrBlock: 10.0.254.0/24
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
  PublicSubnet2:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref WSO2AMVPC
        CidrBlock: 10.0.252.0/24
        AvailabilityZone: !Select
          - '1'
          - !GetAZs ''
  PublicInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WSO2AMVPC
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet
  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref PublicInternetGateway
      DestinationCidrBlock: 0.0.0.0/0
    DependsOn: VPCInternetGatewayAttachment
  VPCInternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref PublicInternetGateway
      VpcId: !Ref WSO2AMVPC
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2AMVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2AMVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2AMVPC
      GroupDescription: DB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
  EFSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2AMVPC
      GroupDescription: EFS Security Group
  ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2AMVPC
      GroupDescription: ELB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
  WSO2AMSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2AMVPC
      GroupDescription: WSO2 API Manager Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: '0'
          ToPort: '0'
          CidrIp: 0.0.0.0/0
  WSO2AMAnalyticsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2AMVPC
      GroupDescription: WSO2 API Manager Analytics Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '7612'
          ToPort: '7612'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '7712'
          ToPort: '7712'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
  WSO2AMELB:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      CrossZone: true
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets:
        - !Ref PublicSubnet2
        - !Ref PublicSubnet
      LBCookieStickinessPolicy:
        - PolicyName: LBStickyPolicy
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
          InstanceProtocol: HTTP
      HealthCheck:
        Target: 'TCP:80'
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '10'
        Timeout: '5'
      Instances:
        - !Ref WSInstanceOne
        - !Ref WSInstanceTwo
    DependsOn:
      - ELBSecurityGroup
  WSO2AMDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBInstanceClass: db.t2.medium
      AllocatedStorage: 5
      BackupRetentionPeriod: '0'
      DBInstanceIdentifier: wso2amdb
      DBName: WSO2AM_DB
      Engine: MySQL
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MultiAZ: 'false'
      StorageType: gp2
      DBSubnetGroupName: !Ref DBSubnetGroup
  WSO2AMAnalyticsDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBInstanceClass: db.t2.medium
      AllocatedStorage: 5
      BackupRetentionPeriod: '0'
      DBInstanceIdentifier: wso2amanalyticsdb
      DBName: WSO2AMAnalytics_DB
      Engine: MySQL
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MultiAZ: 'false'
      StorageType: gp2
      DBSubnetGroupName: !Ref DBSubnetGroup
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: DB Subnet Group
      SubnetIds:
        - !Ref PrivateSubnet
        - !Ref PrivateSubnet2
  WSO2AMNFSMount:
    Type: 'AWS::EFS::FileSystem'
  WSO2AMAnalyticsNFSMount:
    Type: 'AWS::EFS::FileSystem'
  WSO2EFSMtSN1:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      SubnetId: !Ref PrivateSubnet
      FileSystemId: !Ref WSO2AMNFSMount
      SecurityGroups:
        - !Ref EFSSecurityGroup
  WSO2EFSMtSN2:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      FileSystemId: !Ref WSO2AMNFSMount
      SecurityGroups:
        - !Ref EFSSecurityGroup
  WSO2AnalyticsEFSMtSN1:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      SubnetId: !Ref PrivateSubnet
      FileSystemId: !Ref WSO2AMAnalyticsNFSMount
      SecurityGroups:
        - !Ref EFSSecurityGroup
#   WSO2AM1Eth0:
#     Type: 'AWS::EC2::NetworkInterface'
#     Properties:
#       Description: eth0 for WSO2 API Manager instance one
#       GroupSet:
#         - !Ref WSO2AMSecurityGroup
#       PrivateIpAddress: 10.0.1.10
#       SourceDestCheck: 'true'
#       SubnetId: !Ref PrivateSubnet
#   WSO2AM2Eth0:
#     Type: 'AWS::EC2::NetworkInterface'
#     Properties:
#       Description: eth0 for WSO2 API Manager instance two
#       GroupSet:
#         - !Ref WSO2AMSecurityGroup
#       PrivateIpAddress: 10.0.2.10
#       SourceDestCheck: 'true'
#       SubnetId: !Ref PrivateSubnet2
#   WSO2AMAnalytics1Eth0:
#     Type: 'AWS::EC2::NetworkInterface'
#     Properties:
#       Description: eth0 for WSO2 API Manager Analytics instance one
#       GroupSet:
#         - !Ref WSO2AMAnalyticsSecurityGroup
#       PrivateIpAddress: 10.0.1.11
#       SourceDestCheck: 'true'
#       SubnetId: !Ref PrivateSubnet
  WSInstanceOne:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - Description: eth0 for WSO2 API Manager instance one
          GroupSet:
            - !Ref WSO2AMSecurityGroup
          PrivateIpAddress: 10.0.1.10
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PrivateSubnet
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap
            - |
              # Install the files and packages from the metadata
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WSInstanceOne '
            - '         --configsets All '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              # Signal the status from cfn-init
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WSInstanceOne '
            - '         --region '
            - !Ref 'AWS::Region'
            - ''
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          All:
            - ConfigureSampleApp
        ConfigureSampleApp:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: !Join 
                - |+

                - - >-
                    <h1>Congratulations, you have successfully launched the AWS
                    CloudFormation sample.</h1>
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
    DependsOn:
      - PrivateRoute
  WSInstanceTwo:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - Description: eth0 for WSO2 API Manager instance two
          GroupSet:
            - !Ref WSO2AMSecurityGroup
          PrivateIpAddress: 10.0.2.10
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PrivateSubnet2
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap
            - |
              # Install the files and packages from the metadata
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WSInstanceTwo '
            - '         --configsets All '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              # Signal the status from cfn-init
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WSInstanceTwo '
            - '         --region '
            - !Ref 'AWS::Region'
            - ''
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          All:
            - ConfigureSampleApp
        ConfigureSampleApp:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: !Join 
                - |+

                - - >-
                    <h1>Congratulations, you have successfully launched the AWS
                    CloudFormation sample.</h1>
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
    DependsOn:
      - PrivateRoute
  InstanceRecoveryTestAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger a recovery when instance status check fails for 15
        consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: '60'
      EvaluationPeriods: '15'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      AlarmActions:
        - !Sub |
            arn:aws:automate:${AWS::Region}:ec2:recover
    #   AlarmActions: !Sub
    #     - "arn:aws:automate:${Region}:ec2:recover"
    #     - { Region: AWS::Region }
      Dimensions:
      - Name: InstanceId
        Value: !Ref WSInstanceOne
  InstanceRecoveryTestAlarm2:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger a recovery when instance status check fails for 15
        consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: '60'
      EvaluationPeriods: '15'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      AlarmActions:
        - !Sub |
            arn:aws:automate:${AWS::Region}:ec2:recover
    #   AlarmActions: !Sub
    #     - "arn:aws:automate:${Region}:ec2:recover"
    #     - { Region: AWS::Region }
      Dimensions:
      - Name: InstanceId
        Value: !Ref WSInstanceTwo
  PrivateSubnetRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WSO2AMVPC
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateSubnetRouteTable
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      SubnetId: !Ref PrivateSubnet
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      SubnetId: !Ref PrivateSubnet2
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet
  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.micro
      - t2.small
      - t2.medium
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance.
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  CertificateName:
    Description: A previously uploaded certificate to use at the Load Balancer Listeners.
    Type: String
    MinLength: 1
  DBUsername:
    Description: The username to be used in the WSO2 AM DB.
    Type: String
    Default: root
    MinLength: 4
    AllowedPattern: '[A-Za-z0-9\-]+'
  DBPassword:
    Description: The password to be used in the WSO2 AM DB.
    Type: String
    Default: rootrootroot
    MinLength: 8
    NoEcho: true
  SSHLocation:
    Description: ' The IP address range that can be used access the web server using SSH.'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    m1.small:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.large:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    c1.medium:
      Arch: PV64
    c1.xlarge:
      Arch: PV64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      PV64: ami-1ccae774
      HVM64: ami-1ecae776
      HVMG2: ami-8c6b40e4
    us-west-2:
      PV64: ami-ff527ecf
      HVM64: ami-e7527ed7
      HVMG2: ami-abbe919b
    us-west-1:
      PV64: ami-d514f291
      HVM64: ami-d114f295
      HVMG2: ami-f31ffeb7
    eu-west-1:
      PV64: ami-bf0897c8
      HVM64: ami-a10897d6
      HVMG2: ami-d5bc24a2
    eu-central-1:
      PV64: ami-ac221fb1
      HVM64: ami-a8221fb5
      HVMG2: ami-7cd2ef61
    ap-northeast-1:
      PV64: ami-27f90e27
      HVM64: ami-cbf90ecb
      HVMG2: ami-6318e863
    ap-southeast-1:
      PV64: ami-acd9e8fe
      HVM64: ami-68d8e93a
      HVMG2: ami-3807376a
    ap-southeast-2:
      PV64: ami-ff9cecc5
      HVM64: ami-fd9cecc7
      HVMG2: ami-89790ab3
    sa-east-1:
      PV64: ami-bb2890a6
      HVM64: ami-b52890a8
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      PV64: ami-fa39abc3
      HVM64: ami-f239abcb
      HVMG2: NOT_SUPPORTED
Outputs:
  URLOne:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - WSInstanceOne
          - PublicIp
    Description: Instance one URL
  URLTwo:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - WSInstanceTwo
          - PublicIp
    Description: Instance two URL