AWSTemplateFormatVersion: 2010-09-09
Description: >-
  WSO2 API Manager deployment with WSO2 API Manager Analytics for AWS
  Marketplace
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Cluster Configuration
        Parameters:
          - KeyPairName
          - AWSAccessKeySecret
      - Label:
          default: Network Configuration
        Parameters:
          - CertificateName
      - Label:
          default: Database Configuration
        Parameters:
          - DBUsername
          - DBPassword
    ParameterLabels:
      AWSAccessKeySecret:
        default: AWS Access Secret Key
      CertificateName:
        default: Which certificate should be used at the Load Balancer for APIM?
      DBUsername:
        default: APIM Database Master username?
      DBPassword:
        default: APIM Database Master password
Resources:
  WSO2AMVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2AMVPC
      CidrBlock: 10.0.254.0/24
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
  PublicSubnet2:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref WSO2AMVPC
        CidrBlock: 10.0.252.0/24
        AvailabilityZone: !Select
          - '1'
          - !GetAZs ''
  PublicInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WSO2AMVPC
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet
  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref PublicInternetGateway
      DestinationCidrBlock: 0.0.0.0/0
    DependsOn: VPCInternetGatewayAttachment
  VPCInternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref PublicInternetGateway
      VpcId: !Ref WSO2AMVPC
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2AMVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2AMVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2AMVPC
      GroupDescription: DB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
  EFSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2AMVPC
      GroupDescription: EFS Security Group
  ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2AMVPC
      GroupDescription: ELB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          CidrIp: 0.0.0.0/0
  WSO2AMSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2AMVPC
      GroupDescription: WSO2 API Manager Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '5672'
          ToPort: '5672'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
  WSO2AMAnalyticsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2AMVPC
      GroupDescription: WSO2 API Manager Analytics Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '7612'
          ToPort: '7612'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '7712'
          ToPort: '7712'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
  WSO2AMELB:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      CrossZone: true
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets:
        - !Ref PublicSubnet2
        - !Ref PublicSubnet
      LBCookieStickinessPolicy:
        - PolicyName: LBStickyPolicy
      Listeners:
        - LoadBalancerPort: '9763'
          InstancePort: '9763'
          Protocol: HTTP
          InstanceProtocol: HTTP
          PolicyNames:
            - LBStickyPolicy
        - LoadBalancerPort: '9443'
          InstancePort: '9443'
          Protocol: HTTPS
          InstanceProtocol: HTTPS
          PolicyNames:
            - LBStickyPolicy
          SSLCertificateId: !Join
            - ''
            - - 'arn:aws:iam::'
              - !Ref 'AWS::AccountId'
              - ':server-certificate'
              - /
              - !Ref CertificateName
        - LoadBalancerPort: '8243'
          InstancePort: '8243'
          Protocol: HTTPS
          InstanceProtocol: HTTPS
          PolicyNames:
            - LBStickyPolicy
          SSLCertificateId: !Join
            - ''
            - - 'arn:aws:iam::'
              - !Ref 'AWS::AccountId'
              - ':server-certificate'
              - /
              - !Ref CertificateName
      HealthCheck:
          Target: 'TCP:9763'
          HealthyThreshold: '3'
          UnhealthyThreshold: '5'
          Interval: '10'
          Timeout: '5'
    DependsOn:
      - ELBSecurityGroup
  WSO2AMDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBInstanceClass: db.t2.medium
      AllocatedStorage: 5
      BackupRetentionPeriod: '0'
      DBInstanceIdentifier: wso2amdb
      DBName: WSO2AM_DB
      Engine: MySQL
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MultiAZ: 'true'
      StorageType: gp2
      DBSubnetGroupName: !Ref DBSubnetGroup
  WSO2AMAnalyticsDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBInstanceClass: db.t2.medium
      AllocatedStorage: 5
      BackupRetentionPeriod: '0'
      DBInstanceIdentifier: wso2amanalyticsdb
      DBName: WSO2AMAnalytics_DB
      Engine: MySQL
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MultiAZ: 'true'
      StorageType: gp2
      DBSubnetGroupName: !Ref DBSubnetGroup
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: DB Subnet Group
      SubnetIds:
        - !Ref PrivateSubnet
        - !Ref PrivateSubnet2
  WSO2AMNFSMount:
    Type: 'AWS::EFS::FileSystem'
  WSO2AMAnalyticsNFSMount:
    Type: 'AWS::EFS::FileSystem'
  WSO2EFSMtSN1:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      SubnetId: !Ref PrivateSubnet
      FileSystemId: !Ref WSO2AMNFSMount
      SecurityGroups:
        - !Ref EFSSecurityGroup
  WSO2EFSMtSN2:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      FileSystemId: !Ref WSO2AMNFSMount
      SecurityGroups:
        - !Ref EFSSecurityGroup
  WSO2AnalyticsEFSMtSN1:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      SubnetId: !Ref PrivateSubnet
      FileSystemId: !Ref WSO2AMAnalyticsNFSMount
      SecurityGroups:
        - !Ref EFSSecurityGroup
  WSO2AMAnalyticsELB:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      CrossZone: true
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets:
        - !Ref PublicSubnet2
        - !Ref PublicSubnet
      LBCookieStickinessPolicy:
        - PolicyName: LBStickyPolicy
      Listeners:
        - LoadBalancerPort: '9443'
          InstancePort: '9443'
          Protocol: HTTPS
          InstanceProtocol: HTTPS
          PolicyNames:
            - LBStickyPolicy
          SSLCertificateId: !Join
            - ''
            - - 'arn:aws:iam::'
              - !Ref 'AWS::AccountId'
              - ':server-certificate'
              - /
              - !Ref CertificateName
        - LoadBalancerPort: '8243'
          InstancePort: '8243'
          Protocol: HTTPS
          InstanceProtocol: HTTPS
          PolicyNames:
            - LBStickyPolicy
          SSLCertificateId: !Join
            - ''
            - - 'arn:aws:iam::'
              - !Ref 'AWS::AccountId'
              - ':server-certificate'
              - /
              - !Ref CertificateName
        - LoadBalancerPort: '9763'
          InstancePort: '9763'
          Protocol: HTTP
          InstanceProtocol: HTTP
          PolicyNames:
            - LBStickyPolicy
        - LoadBalancerPort: '10389'
          InstancePort: '10389'
          Protocol: TCP
          InstanceProtocol: TCP
        - LoadBalancerPort: '8000'
          InstancePort: '8000'
          Protocol: TCP
          InstanceProtocol: TCP
        - LoadBalancerPort: '5701'
          InstancePort: '5701'
          Protocol: TCP
          InstanceProtocol: TCP
        - LoadBalancerPort: '5672'
          InstancePort: '5672'
          Protocol: TCP
          InstanceProtocol: TCP
        - LoadBalancerPort: '10397'
          InstancePort: '10397'
          Protocol: TCP
          InstanceProtocol: TCP
      HealthCheck:
        Target: 'TCP:9763'
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '10'
        Timeout: '5'
    DependsOn:
      - ELBSecurityGroup
  WSO2AM1Eth0:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      Description: eth0 for WSO2 API Manager instance one
      GroupSet:
        - !Ref WSO2AMSecurityGroup
      PrivateIpAddress: 10.0.1.10
      SourceDestCheck: 'true'
      SubnetId: !Ref PrivateSubnet
  WSO2AM2Eth0:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      Description: eth0 for WSO2 API Manager instance two
      GroupSet:
        - !Ref WSO2AMSecurityGroup
      PrivateIpAddress: 10.0.2.10
      SourceDestCheck: 'true'
      SubnetId: !Ref PrivateSubnet2
  WSO2AMAnalytics1Eth0:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      Description: eth0 for WSO2 API Manager Analytics instance one
      GroupSet:
        - !Ref WSO2AMAnalyticsSecurityGroup
      PrivateIpAddress: 10.0.1.11
      SourceDestCheck: 'true'
      SubnetId: !Ref PrivateSubnet
  AWSCliInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref APIMDeploymentCLIRole
      InstanceProfileName: CLIInstanceProfileForAMDeployment
  APIMDeploymentCLIRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: all-ec2TODO
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:*'
                Resource: '*'
Outputs:
  Publisher:
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt 
          - WSO2AMELB
          - DNSName
        - ':9443/publisher'
    Description: WSO2 API Manager Publisher URL.
  Store:
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt 
          - WSO2AMELB
          - DNSName
        - ':9443/store'
    Description: WSO2 API Manager Store URL.
  Carbon:
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt 
          - WSO2AMELB
          - DNSName
        - ':9443/carbon'
    Description: WSO2 API Manager Console URL.
  Credentials:
    Value: !Join 
      - ''
      - - 'Username: admin, '
        - 'Password: admin'
    Description: >-
      WSO2 API Manager Admin Credentials. Please refer
      https://docs.wso2.com/display/AM210/Maintaining+Logins+and+passwords to
      change credentials.
Parameters:
  KeyPairName:
    Description: >-
      The key pair to establish a SSH connection to the web servers. This should
      be already created.
    Type: 'AWS::EC2::KeyPair::KeyName'
  CertificateName:
    Description: A previously uploaded certificate to use at the Load Balancer Listeners.
    Type: String
    MinLength: 1
  DBUsername:
    Description: The username to be used in the WSO2 AM DB.
    Type: String
    Default: root
    MinLength: 4
    AllowedPattern: '[A-Za-z0-9\-]+'
  DBPassword:
    Description: The password to be used in the WSO2 AM DB.
    Type: String
    Default: rootrootroot
    MinLength: 8
    NoEcho: true
Conditions: {}
Mappings:
  AWSAMIRegionMap:
    ap-northeast-1:
      Ubuntu140464bit: ami-2e63924f
    ap-northeast-2:
      Ubuntu140464bit: ami-979258f9
    ap-south-1:
      Ubuntu140464bit: ami-4a90fa25
    ap-southeast-1:
      Ubuntu140464bit: ami-ea2bf989
    ap-southeast-2:
      Ubuntu140464bit: ami-396a415a
    eu-central-1:
      Ubuntu140464bit: ami-4bd03b24
    eu-west-1:
      Ubuntu140464bit: ami-02b62c71
    eu-west-2:
      Ubuntu140464bit: ami-63342007
    us-east-1:
      Ubuntu140464bit: ami-a9e2a9bf
    us-east-2:
      Ubuntu140464bit: ami-9f0627fa
    us-west-1:
      Ubuntu140464bit: ami-992661f9
    us-west-2:
      Ubuntu140464bit: ami-42569022
    ca-central-1:
      Ubuntu140464bit: ami-beea56da
    sa-east-1:
      Ubuntu140464bit: ami-8df695e1
  AWSAnalyticsAMIRegionMap:
    ap-northeast-1:
      Ubuntu140464bit: ami-2e63924f
    ap-northeast-2:
      Ubuntu140464bit: ami-979258f9
    ap-south-1:
      Ubuntu140464bit: ami-4a90fa25
    ap-southeast-1:
      Ubuntu140464bit: ami-ea2bf989
    ap-southeast-2:
      Ubuntu140464bit: ami-396a415a
    eu-central-1:
      Ubuntu140464bit: ami-4bd03b24
    eu-west-1:
      Ubuntu140464bit: ami-02b62c71
    eu-west-2:
      Ubuntu140464bit: ami-63342007
    us-east-1:
      Ubuntu140464bit: ami-a9e2a9bf
    us-east-2:
      Ubuntu140464bit: ami-c53011a0
    us-west-1:
      Ubuntu140464bit: ami-992661f9
    us-west-2:
      Ubuntu140464bit: ami-42569022
    ca-central-1:
      Ubuntu140464bit: ami-beea56da
    sa-east-1:
      Ubuntu140464bit: ami-8df695e1
